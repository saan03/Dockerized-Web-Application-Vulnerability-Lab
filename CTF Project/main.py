from flask import Flask, render_template, request, redirect, url_for
from app.sql import sql_app
from app.xss import xss_app
from app.command import command_app
from app.insecure import insecure_app
import os
import subprocess

app = Flask(__name__, template_folder='app/templates', static_folder='app/static')

app.register_blueprint(sql_app, url_prefix='/sql')
app.register_blueprint(xss_app, url_prefix='/xss')
app.register_blueprint(command_app, url_prefix='/command')
app.register_blueprint(insecure_app, url_prefix='/insecure')

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/file', methods=['GET', 'POST'])
def file():
    if request.method == 'POST':
        if 'file' not in request.files:
            return 'No file part'
        file = request.files['file']
        if file.filename == '':
            return 'No selected file'
        allowed_extensions = {'.sh', '.txt', '.jpg', '.png'}
        if file and any(file.filename.endswith(ext) for ext in allowed_extensions):
            filepath = os.path.join('uploads', file.filename)
            file.save(filepath)
            
            # Convert Windows line endings to Unix line endings
            with open(filepath, 'rb') as f:
                content = f.read().replace(b'\r\n', b'\n')
            with open(filepath, 'wb') as f:
                f.write(content)
                
            os.chmod(filepath, 0o755)  # Ensure the file has execute permissions
            if file.filename.endswith('.sh'):
                return redirect(url_for('execute_file', filename=file.filename))
            else:
                return f"File {file.filename} uploaded successfully."
        return 'Invalid file type'
    return render_template('file.html')

@app.route('/execute_file/<filename>')
def execute_file(filename):
    filepath = os.path.join('uploads', filename)
    if os.path.exists(filepath):
        try:
            # Change working directory to 'uploads' and execute the script
            result = subprocess.check_output(['bash', filename], cwd='uploads', stderr=subprocess.STDOUT)
            return f"<pre>{result.decode()}</pre>"
        except subprocess.CalledProcessError as e:
            return f"Error executing file: {e.output.decode()}"
    return 'File not found'

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')